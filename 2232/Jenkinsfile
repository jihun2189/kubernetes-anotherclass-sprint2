pipeline {
    agent any

    tools {
        gradle 'gradle 7.6.1'  // üîπ JenkinsÏóêÏÑú ÏÑ§Ï†ïÌïú Global Gradle ÏÇ¨Ïö©
    }

    environment {
        // NHN Cloud NCR Ï†ïÎ≥¥
        NCR_REGISTRY = "4a7e3ac9-kr1-registry.container.nhncloud.com"
        NCR_NAMESPACE = "ncr_test"
        NCR_IMAGE_NAME = "myapp"
        NCR_TAG = "latest"
        NCR_CREDENTIALS_ID = "NCR_CREDENTIALS"

        // GitHub Repository Ï†ïÎ≥¥
        GIT_REPO_URL = "https://github.com/jihun2189/kubernetes-anotherclass-sprint2.git"
        GIT_BRANCH = "main"

        // ÎπåÎìúÎêú JAR ÌååÏùº Í≤ΩÎ°ú ÏÑ§Ï†ï
        BUILD_DIR = "2232/build/libs"
        JAR_FILE = "app-0.0.1-SNAPSHOT.jar"
    }
    
    stages {
        stage('Checkout Source Code from GitHub') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO_URL}"
            }
        }

        stage('Build Application') {
            steps {
                script {
                    sh """
                    cd 2232  // üîπ Gradle ÌîÑÎ°úÏ†ùÌä∏ Ìè¥ÎçîÎ°ú Ïù¥Îèô
                    gradle clean build
                    """
                }
            }
        }

        stage('Prepare Docker Build Context') {
            steps {
                script {
                    sh """
                    if [ ! -f ${BUILD_DIR}/${JAR_FILE} ]; then
                        echo "Error: JAR file not found!"
                        exit 1
                    fi
                    cp ${BUILD_DIR}/${JAR_FILE} 2232/build/docker/
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    docker build -t \${NCR_REGISTRY}/\${NCR_NAMESPACE}/\${NCR_IMAGE_NAME}:\${NCR_TAG} \
                    -f 2232/build/docker/Dockerfile 2232/build/docker/
                    """
                }
            }
        }

        stage('Login to NHN Cloud NCR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: NCR_CREDENTIALS_ID, usernameVariable: 'NCR_USER', passwordVariable: 'NCR_PASS')]) {
                        sh """
                        echo "\${NCR_PASS}" | docker login \${NCR_REGISTRY} -u "\${NCR_USER}" --password-stdin
                        """
                    }
                }
            }
        }

        stage('Push Docker Image to NHN Cloud NCR') {
            steps {
                script {
                    sh """
                    docker push \${NCR_REGISTRY}/\${NCR_NAMESPACE}/\${NCR_IMAGE_NAME}:\${NCR_TAG}
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    sh """
                    docker rmi \${NCR_REGISTRY}/\${NCR_NAMESPACE}/\${NCR_IMAGE_NAME}:\${NCR_TAG} || true
                    """
                }
            }
        }
    }
}
